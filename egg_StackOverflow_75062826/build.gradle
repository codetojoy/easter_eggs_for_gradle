
import java.nio.file.Files
import java.util.stream.*

apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'org.peidevs.waro.Main'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.codepoetics:protonpack:1.16'
    implementation 'com.google.guava:guava:24.1-jre'
    implementation 'org.apache.commons:commons-lang3:3.10'
    implementation 'org.springframework:spring-context:5.2.5.RELEASE'

    testImplementation(platform("org.junit:junit-bom:5.9.1"))
    testImplementation("org.junit.jupiter:junit-jupiter")
}

installDist.doFirst {
    ant.delete(dir: project.stagingDir)
}

installDist {
    into project.stagingDir
}

task checkTestCoverage {
    dependsOn "compileTestJava"
    doLast {
        def mainDirs = sourceSets.main.output.getClassesDirs()
        assert mainDirs.size() == 1
        def mainFiles = []
        try (def walk = Files.walk(mainDirs[0].toPath())) {
            mainFiles = walk.filter(Files::isRegularFile).collect(Collectors.toList())
        }

        def testDirs = sourceSets.test.output.getClassesDirs()
        assert testDirs.size() == 1
        def testFiles = []
        try (def walk = Files.walk(testDirs[0].toPath())) {
            testFiles = walk.filter(Files::isRegularFile).collect(Collectors.toList())
        }

        mainFiles.each { mainFile ->
            def mainFileName = mainFile.toFile().name.replace(".class", "")

            def found = testFiles.findAll { testFile -> 
                def testFileName = testFile.toFile().name.replace(".class", "")
                "${mainFileName}Test" == testFileName
            }

            if (!found) {
                println "TRACER missing: " + mainFileName
            }
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "failed"
    }
}
